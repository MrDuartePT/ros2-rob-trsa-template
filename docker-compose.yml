version: '3.9'

volumes:
  # Store VS Code extensions in named volume to prevent re-downloads.
  # See: https://code.visualstudio.com/remote/advancedcontainers/avoid-extension-reinstalls
  # Also see: https://github.com/microsoft/vscode-remote-release/issues/7690
  vscode-extensions: # Store pip wheel cache in named volume to prevent re-downloads.

  pip-whl-cache:


services:
  dev:
    ## Github
    image: 'ghcr.io/mrduartept/ros2-rob-trsa-template:latest'
    #image: 'ghcr.io/mrduartept/ros2-rob-trsa-template:humble-amd64'
    #image: 'ghcr.io/mrduartept/ros2-rob-trsa-template:humble-arm64'
    ## Docker Hub
    #image: 'mrduartept/ros2-rob-trsa-template:latest'
    #image: 'mrduartept/ros2-rob-trsa-template:humble-amd64'
    #image: 'mrduartept/ros2-rob-trsa-template:humble-arm64'
    # Can be build locally if prefered
    #build:
      #context: .
      #dockerfile: Dockerfile

    devices:
      - "/dev/fuse:/dev/fuse"

    volumes:
      # Store VS Code extensions in named volume to prevent re-downloads.
      - vscode-extensions:/root/.vscode-server
      # Store pip wheel cache in named volume to prevent re-downloads.
      - pip-whl-cache:/root/.cache/pip
      # Allow access to Docker daemon for VS Code Docker extension to work inside container.
      - /var/run/docker.sock:/var/run/docker.sock
      # Mount point for `./rob_ws` and `./trsa_ws` folder.
      ## Linux/MacOs Mount
      - $HOME/Documents/FCT/Ros2/rob_ws:/home/vscode/rob_ws
      - $HOME/Documents/FCT/Ros2/trsa_ws:/home/vscode/trsa_ws
      - $HOME/Documents/FCT/Ros2/trsa_ws/.gazebo-cache:/home/vscode/.gazebo
      ## Windows Mount
      #- '$USERPROFILE\Documents\FCT\Ros2\rob_ws:/home/vscode/rob_ws'
      #- '$USERPROFILE\Documents\FCT\Ros2\trsa_ws:/home/vscode/trsa_ws'
      #- '$USERPROFILE\Documents\FCT\Ros2\trsa_ws\.gazebo-cache:/home/vscode/.gazebo'

      # Better process handling by using a process management system (tini).
    init: true
    # Larger shared memory for VNC & ROS.
    shm_size: 1gb

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined

    # Used to allow ROS to communicate across containers.
    ipc: service:donor
    pid: service:donor

    # Isolate ROS nodes into their own network.
    network_mode: service:donor

    # Override default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"
    # (Optinal) Request for GPU access.
    #environment:
    #  - NVIDIA_DRIVER_CAPABILITIES=all
    #  - __NV_PRIME_RENDER_OFFLOAD=1
    #  - __GLX_VENDOR_LIBRARY_NAME=nvidia
    #deploy:
    #  resources:
    #    reservations:
    #      devices:
    #      - capabilities: [ gpu ]

    # Example of setup for ROS to be able to communicate across containers.
    # Is unnecessary if using a single container.
  donor:
    ports:
      # Expose noVNC web app.
      - 6080:6080
      # Expose rosbridge.
      - 9090:9090

    # Used to allow ROS to communicate across containers.
    ipc: shareable

    image: alpine # smallest image
    stop_signal: SIGKILL
    command: sleep infinity
